import { EventEmitter, OnDestroy, OnInit, ChangeDetectorRef } from '@angular/core';
import { NotificationAnimationType } from '../../enums/notification-animation-type.enum';
import { Notification } from '../../interfaces/notification.type';
import { Options, Position } from '../../interfaces/options.type';
import { NotificationsService } from '../../services/notifications.service';
import * as ɵngcc0 from '@angular/core';
export declare class SimpleNotificationsComponent implements OnInit, OnDestroy {
    private service;
    private cd;
    constructor(service: NotificationsService, cd: ChangeDetectorRef);
    options: Options;
    create: EventEmitter<any>;
    destroy: EventEmitter<any>;
    notifications: Notification[];
    position: Position;
    private lastNotificationCreated;
    private listener;
    private lastOnBottom;
    private maxStack;
    private preventLastDuplicates;
    private preventDuplicates;
    timeOut: number;
    maxLength: number;
    clickToClose: boolean;
    clickIconToClose: boolean;
    showProgressBar: boolean;
    pauseOnHover: boolean;
    theClass: string;
    rtl: boolean;
    animate: NotificationAnimationType;
    private usingComponentOptions;
    ngOnInit(): void;
    ngOnDestroy(): void;
    defaultBehavior(value: any): void;
    add(item: Notification): void;
    block(item: Notification): boolean;
    checkStandard(checker: Notification, item: Notification): boolean;
    checkHtml(checker: Notification, item: Notification): boolean;
    attachChanges(options: any): void;
    buildEmit(notification: Notification, to: boolean): Notification;
    cleanSingle(id: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SimpleNotificationsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SimpleNotificationsComponent, "simple-notifications", never, { "options": "options"; }, { "create": "create"; "destroy": "destroy"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLW5vdGlmaWNhdGlvbnMuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNpbXBsZS1ub3RpZmljYXRpb25zLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25Jbml0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25BbmltYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvbm90aWZpY2F0aW9uLWFuaW1hdGlvbi10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL25vdGlmaWNhdGlvbi50eXBlJztcclxuaW1wb3J0IHsgT3B0aW9ucywgUG9zaXRpb24gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL29wdGlvbnMudHlwZSc7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbm90aWZpY2F0aW9ucy5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2ltcGxlTm90aWZpY2F0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgc2VydmljZTtcclxuICAgIHByaXZhdGUgY2Q7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlOiBOb3RpZmljYXRpb25zU2VydmljZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcclxuICAgIG9wdGlvbnM6IE9wdGlvbnM7XHJcbiAgICBjcmVhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgZGVzdHJveTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBub3RpZmljYXRpb25zOiBOb3RpZmljYXRpb25bXTtcclxuICAgIHBvc2l0aW9uOiBQb3NpdGlvbjtcclxuICAgIHByaXZhdGUgbGFzdE5vdGlmaWNhdGlvbkNyZWF0ZWQ7XHJcbiAgICBwcml2YXRlIGxpc3RlbmVyO1xyXG4gICAgcHJpdmF0ZSBsYXN0T25Cb3R0b207XHJcbiAgICBwcml2YXRlIG1heFN0YWNrO1xyXG4gICAgcHJpdmF0ZSBwcmV2ZW50TGFzdER1cGxpY2F0ZXM7XHJcbiAgICBwcml2YXRlIHByZXZlbnREdXBsaWNhdGVzO1xyXG4gICAgdGltZU91dDogbnVtYmVyO1xyXG4gICAgbWF4TGVuZ3RoOiBudW1iZXI7XHJcbiAgICBjbGlja1RvQ2xvc2U6IGJvb2xlYW47XHJcbiAgICBjbGlja0ljb25Ub0Nsb3NlOiBib29sZWFuO1xyXG4gICAgc2hvd1Byb2dyZXNzQmFyOiBib29sZWFuO1xyXG4gICAgcGF1c2VPbkhvdmVyOiBib29sZWFuO1xyXG4gICAgdGhlQ2xhc3M6IHN0cmluZztcclxuICAgIHJ0bDogYm9vbGVhbjtcclxuICAgIGFuaW1hdGU6IE5vdGlmaWNhdGlvbkFuaW1hdGlvblR5cGU7XHJcbiAgICBwcml2YXRlIHVzaW5nQ29tcG9uZW50T3B0aW9ucztcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgZGVmYXVsdEJlaGF2aW9yKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgYWRkKGl0ZW06IE5vdGlmaWNhdGlvbik6IHZvaWQ7XHJcbiAgICBibG9jayhpdGVtOiBOb3RpZmljYXRpb24pOiBib29sZWFuO1xyXG4gICAgY2hlY2tTdGFuZGFyZChjaGVja2VyOiBOb3RpZmljYXRpb24sIGl0ZW06IE5vdGlmaWNhdGlvbik6IGJvb2xlYW47XHJcbiAgICBjaGVja0h0bWwoY2hlY2tlcjogTm90aWZpY2F0aW9uLCBpdGVtOiBOb3RpZmljYXRpb24pOiBib29sZWFuO1xyXG4gICAgYXR0YWNoQ2hhbmdlcyhvcHRpb25zOiBhbnkpOiB2b2lkO1xyXG4gICAgYnVpbGRFbWl0KG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uLCB0bzogYm9vbGVhbik6IE5vdGlmaWNhdGlvbjtcclxuICAgIGNsZWFuU2luZ2xlKGlkOiBzdHJpbmcpOiB2b2lkO1xyXG59XHJcbiJdfQ==