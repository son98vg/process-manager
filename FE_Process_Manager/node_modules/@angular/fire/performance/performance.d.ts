import { InjectionToken, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import firebase from 'firebase/app';
import { FirebaseApp, ɵPromiseProxy } from '@angular/fire';
import * as ɵngcc0 from '@angular/core';
export declare const AUTOMATICALLY_TRACE_CORE_NG_METRICS: InjectionToken<boolean>;
export declare const INSTRUMENTATION_ENABLED: InjectionToken<boolean>;
export declare const DATA_COLLECTION_ENABLED: InjectionToken<boolean>;
export interface AngularFirePerformance extends ɵPromiseProxy<firebase.performance.Performance> {
}
export declare class AngularFirePerformance {
    private zone;
    private readonly performance;
    constructor(app: FirebaseApp, instrumentationEnabled: boolean | null, dataCollectionEnabled: boolean | null, zone: NgZone, platformId: Object);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFirePerformance, [null, { optional: true; }, { optional: true; }, null, null]>;
}
export declare const traceUntil: <T = any>(name: string, test: (a: T) => boolean, options?: {
    orComplete?: boolean;
}) => (source$: Observable<T>) => Observable<T>;
export declare const traceWhile: <T = any>(name: string, test: (a: T) => boolean, options?: {
    orComplete?: boolean;
}) => (source$: Observable<T>) => Observable<T>;
export declare const traceUntilComplete: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;
export declare const traceUntilFirst: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;
export declare const trace: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UuZC50cyIsInNvdXJjZXMiOlsicGVyZm9ybWFuY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IEZpcmViYXNlQXBwLCDJtVByb21pc2VQcm94eSB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgQVVUT01BVElDQUxMWV9UUkFDRV9DT1JFX05HX01FVFJJQ1M6IEluamVjdGlvblRva2VuPGJvb2xlYW4+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgSU5TVFJVTUVOVEFUSU9OX0VOQUJMRUQ6IEluamVjdGlvblRva2VuPGJvb2xlYW4+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgREFUQV9DT0xMRUNUSU9OX0VOQUJMRUQ6IEluamVjdGlvblRva2VuPGJvb2xlYW4+O1xuZXhwb3J0IGludGVyZmFjZSBBbmd1bGFyRmlyZVBlcmZvcm1hbmNlIGV4dGVuZHMgybVQcm9taXNlUHJveHk8ZmlyZWJhc2UucGVyZm9ybWFuY2UuUGVyZm9ybWFuY2U+IHtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2Uge1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBlcmZvcm1hbmNlO1xuICAgIGNvbnN0cnVjdG9yKGFwcDogRmlyZWJhc2VBcHAsIGluc3RydW1lbnRhdGlvbkVuYWJsZWQ6IGJvb2xlYW4gfCBudWxsLCBkYXRhQ29sbGVjdGlvbkVuYWJsZWQ6IGJvb2xlYW4gfCBudWxsLCB6b25lOiBOZ1pvbmUsIHBsYXRmb3JtSWQ6IE9iamVjdCk7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0cmFjZVVudGlsOiA8VCA9IGFueT4obmFtZTogc3RyaW5nLCB0ZXN0OiAoYTogVCkgPT4gYm9vbGVhbiwgb3B0aW9ucz86IHtcbiAgICBvckNvbXBsZXRlPzogYm9vbGVhbjtcbn0pID0+IChzb3VyY2UkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPYnNlcnZhYmxlPFQ+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHJhY2VXaGlsZTogPFQgPSBhbnk+KG5hbWU6IHN0cmluZywgdGVzdDogKGE6IFQpID0+IGJvb2xlYW4sIG9wdGlvbnM/OiB7XG4gICAgb3JDb21wbGV0ZT86IGJvb2xlYW47XG59KSA9PiAoc291cmNlJDogT2JzZXJ2YWJsZTxUPikgPT4gT2JzZXJ2YWJsZTxUPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHRyYWNlVW50aWxDb21wbGV0ZTogPFQgPSBhbnk+KG5hbWU6IHN0cmluZykgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0cmFjZVVudGlsRmlyc3Q6IDxUID0gYW55PihuYW1lOiBzdHJpbmcpID0+IChzb3VyY2UkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPYnNlcnZhYmxlPFQ+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHJhY2U6IDxUID0gYW55PihuYW1lOiBzdHJpbmcpID0+IChzb3VyY2UkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPYnNlcnZhYmxlPFQ+O1xuIl19