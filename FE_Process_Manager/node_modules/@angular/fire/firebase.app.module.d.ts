import { InjectionToken, ModuleWithProviders, NgZone, Version } from '@angular/core';
import firebase from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
export interface FirebaseOptions {
    [key: string]: any;
}
export interface FirebaseAppConfig {
    [key: string]: any;
}
export declare const FIREBASE_OPTIONS: InjectionToken<FirebaseOptions>;
export declare const FIREBASE_APP_NAME: InjectionToken<string | FirebaseAppConfig>;
export declare class FirebaseApp implements Partial<firebase.app.App> {
    name: string;
    options: {};
    analytics: () => firebase.analytics.Analytics;
    auth: () => firebase.auth.Auth;
    database: (databaseURL?: string) => firebase.database.Database;
    messaging: () => firebase.messaging.Messaging;
    performance: () => firebase.performance.Performance;
    storage: (storageBucket?: string) => firebase.storage.Storage;
    delete: () => Promise<void>;
    firestore: () => firebase.firestore.Firestore;
    functions: (region?: string) => firebase.functions.Functions;
    remoteConfig: () => firebase.remoteConfig.RemoteConfig;
}
export declare const VERSION: Version;
export declare function ɵfirebaseAppFactory(options: FirebaseOptions, zone: NgZone, nameOrConfig?: string | FirebaseAppConfig | null): FirebaseApp;
export declare class AngularFireModule {
    static initializeApp(options: FirebaseOptions, nameOrConfig?: string | FirebaseAppConfig): ModuleWithProviders<AngularFireModule>;
    constructor(platformId: Object);
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AngularFireModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AngularFireModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJmaXJlYmFzZS5hcHAubW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nWm9uZSwgVmVyc2lvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5leHBvcnQgaW50ZXJmYWNlIEZpcmViYXNlT3B0aW9ucyB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xufVxuZXhwb3J0IGludGVyZmFjZSBGaXJlYmFzZUFwcENvbmZpZyB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgRklSRUJBU0VfT1BUSU9OUzogSW5qZWN0aW9uVG9rZW48RmlyZWJhc2VPcHRpb25zPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEZJUkVCQVNFX0FQUF9OQU1FOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZz47XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaXJlYmFzZUFwcCBpbXBsZW1lbnRzIFBhcnRpYWw8ZmlyZWJhc2UuYXBwLkFwcD4ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBvcHRpb25zOiB7fTtcbiAgICBhbmFseXRpY3M6ICgpID0+IGZpcmViYXNlLmFuYWx5dGljcy5BbmFseXRpY3M7XG4gICAgYXV0aDogKCkgPT4gZmlyZWJhc2UuYXV0aC5BdXRoO1xuICAgIGRhdGFiYXNlOiAoZGF0YWJhc2VVUkw/OiBzdHJpbmcpID0+IGZpcmViYXNlLmRhdGFiYXNlLkRhdGFiYXNlO1xuICAgIG1lc3NhZ2luZzogKCkgPT4gZmlyZWJhc2UubWVzc2FnaW5nLk1lc3NhZ2luZztcbiAgICBwZXJmb3JtYW5jZTogKCkgPT4gZmlyZWJhc2UucGVyZm9ybWFuY2UuUGVyZm9ybWFuY2U7XG4gICAgc3RvcmFnZTogKHN0b3JhZ2VCdWNrZXQ/OiBzdHJpbmcpID0+IGZpcmViYXNlLnN0b3JhZ2UuU3RvcmFnZTtcbiAgICBkZWxldGU6ICgpID0+IFByb21pc2U8dm9pZD47XG4gICAgZmlyZXN0b3JlOiAoKSA9PiBmaXJlYmFzZS5maXJlc3RvcmUuRmlyZXN0b3JlO1xuICAgIGZ1bmN0aW9uczogKHJlZ2lvbj86IHN0cmluZykgPT4gZmlyZWJhc2UuZnVuY3Rpb25zLkZ1bmN0aW9ucztcbiAgICByZW1vdGVDb25maWc6ICgpID0+IGZpcmViYXNlLnJlbW90ZUNvbmZpZy5SZW1vdGVDb25maWc7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBWRVJTSU9OOiBWZXJzaW9uO1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gybVmaXJlYmFzZUFwcEZhY3Rvcnkob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCB6b25lOiBOZ1pvbmUsIG5hbWVPckNvbmZpZz86IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgbnVsbCk6IEZpcmViYXNlQXBwO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhckZpcmVNb2R1bGUge1xuICAgIHN0YXRpYyBpbml0aWFsaXplQXBwKG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgbmFtZU9yQ29uZmlnPzogc3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEFuZ3VsYXJGaXJlTW9kdWxlPjtcbiAgICBjb25zdHJ1Y3RvcihwbGF0Zm9ybUlkOiBPYmplY3QpO1xufVxuIl19